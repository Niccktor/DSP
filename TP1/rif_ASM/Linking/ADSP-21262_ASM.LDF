

ARCHITECTURE(ADSP-21262)

//
//   ADSP-21262 Memory Map:
//   ------------------------------------------------
//                    0x0000 0000 to 0x0003 FFFF  IOP Regs
//           Block0   0x0004 0000 to 0x0004 3FFF  Long word (64) Space (1MB RAM)
//           Block0   0x0004 4000 to 0x0005 7FFF  Internal Memory (Reserved 5MB)
//           Block0   0x0005 8000 to 0x0005 FFFF  Long word (64) Space (2MB ROM) 

//           Block1   0x0006 0000 to 0x0006 3FFF  Long word (64) Space (1MB RAM) 
//           Block1   0x0006 4000 to 0x0007 7FFF  Internal Memory (Reserved 5MB) 
//           Block1   0x0007 8000 to 0x0007 FFFF  Long word (64) Space (2MB ROM) 

//           Block0   0x0008 0000 to 0x0008 7FFF  Normal word (32) Space (1MB RAM) 
//           Block0   0x0008 8000 to 0x000A FFFF  Internal Memory (Reserved 5MB) 
//           Block0   0x000B 0000 to 0x000B FFFF  Normal word (32) Space (2MB ROM)
//   ------------------------------------------------
//                    0x000A 0000 to 0x000A AAAA  48-bit addresses
//   ------------------------------------------------
//           Block1   0x000C 0000 to 0x000C 7FFF  Normal word (32) Space (1MB RAM)
//           Block1   0x000C 8000 to 0x000E FFFF  Internal Memory (Reserved 5MB)
//           Block1   0x000F 0000 to 0x000F FFFF  Normal word (32) Space (2MB ROM)
//   ------------------------------------------------
//                    0x000E 0000 to 0x000E AAAA  48-bit addresses
//   ------------------------------------------------
//           Block0   0x0010 0000 to 0x0010 FFFF  Short word (16) Space (1MB RAM)
//           Block0   0x0011 0000 to 0x0015 FFFF  Internal Memory (Reserved 5MB)
//           Block0   0x0011 0000 to 0x0015 FFFF  Internal Memory (Reserved 5MB)
//           Block0   0x0016 0000 to 0x0017 FFFF  Short word (16) Space (2MB ROM)

//           Block1   0x0018 0000 to 0x0018 FFFF  Short word (16) Space (1MB RAM)
//           Block1   0x0019 0000 to 0x001D FFFF  Internal Memory (Reserved 5MB)
//           Block1   0x001E 0000 to 0x001F FFFF  Short word (16) Space (2MB ROM)

//   ------------------------------------------------
//   External memory  0x0100 0000 to 0x02FF FFFF  
//   ------------------------------------------------

// This linker description file allocates:
//         Internal 256 words of run-time header in memory block 0
//                  256 words of initialization code in memory block 0
//                  16K words of C code space in memory block 0
//                   7K words of C PM data space in memory block 0
//                  16K words of C DM data space in memory block 1
//                   8K words of C heap space in memory block 1
//                   8K words of C stack space in memory block 1

#ifndef __NO_STD_LIB
SEARCH_DIR( $ADI_DSP/212xx/lib )
#endif

// The I/O library provides support for printing hexadecimal constants
// using the "%a" conversion specifier, and for registering alternatives to
// the default device driver that is supported by the VisualDSP++ simulator
// and EZ-KIT Lite systems. Those applications that do not require this
// functionality may define the macro __LIBIO_LITE which will select an
// alternative I/O library and lead to reduced code occupancy.

#ifdef __LIBIO_LITE
	# define LIBIO libio_lite.dlb
	# define LIBIOMT libio_litemt.dlb
#else
	# define LIBIO libio.dlb
	# define LIBIOMT libiomt.dlb
#endif

#ifdef _ADI_THREADS
	#ifdef __ADI_LIBEH__
		$LIBRARIES = libehmt.dlb, libc26xmt.dlb, LIBIOMT, libdsp26x.dlb;
	#else
		$LIBRARIES = libc26xmt.dlb, LIBIOMT, libdsp26x.dlb;
	#endif
#else
	#ifdef __ADI_LIBEH__
		$LIBRARIES = libeh.dlb, libc26x.dlb, LIBIO, libdsp26x.dlb;
	#else
		$LIBRARIES = libc26x.dlb, LIBIO, libdsp26x.dlb;
	#endif
#endif


// Libraries from the command line are included in COMMAND_LINE_OBJECTS.
$OBJECTS = $COMMAND_LINE_OBJECTS;

MEMORY
{
  seg_rth  { TYPE(PM RAM) START(0x00080000) END(0x000800ff) WIDTH(48) }
  seg_init { TYPE(PM RAM) START(0x00080100) END(0x000801ff) WIDTH(48) }
  seg_int_code { TYPE(PM RAM) START(0x00080200) END(0x000802ef) WIDTH(48) }
  seg_pmco { TYPE(PM RAM) START(0x000802f0) END(0x000841ff) WIDTH(48) }
  seg_pmda { TYPE(PM RAM) START(0x00086300) END(0x00087fff) WIDTH(32) }

    seg_dmda { TYPE(DM RAM) START(0x000c0000) END(0x000c7fff) WIDTH(32) }
 seg_sram { TYPE(DMAONLY DM) START(0x01000000) END(0x02ffffff) WIDTH(8) }
}


PROCESSOR p0
{
    LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST)
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

    SECTIONS
    {
        // .text output section
        seg_rth
        {
            INPUT_SECTIONS( $OBJECTS(seg_rth) $LIBRARIES(seg_rth))
        } > seg_rth

        seg_init
        {
            ldf_seginit_space = . ;
            INPUT_SECTIONS( $OBJECTS(seg_init) $LIBRARIES(seg_init))
        } > seg_init

        seg_int_code
        {
            INPUT_SECTIONS( $OBJECTS(seg_int_code) $LIBRARIES(seg_int_code))
        } > seg_int_code

        seg_pmco
        {
            INPUT_SECTIONS( $OBJECTS(seg_pmco) $LIBRARIES(seg_pmco))
        } > seg_pmco

        seg_pmda
        {
            INPUT_SECTIONS( $OBJECTS(seg_pmda) $LIBRARIES(seg_pmda))
        } > seg_pmda


        .bss ZERO_INIT
        {
           INPUT_SECTIONS( $OBJECTS(.bss) $LIBRARIES(.bss))
        } > seg_dmda

        seg_dmda
        {
            RESERVE(heaps_and_stack, heaps_and_stack_length = 16K)
            INPUT_SECTIONS( $OBJECTS(seg_dmda) $LIBRARIES(seg_dmda))
            RESERVE_EXPAND(heaps_and_stack, heaps_and_stack_length)
            ldf_stack_space = heaps_and_stack;
            ldf_stack_end = ldf_stack_space + ((heaps_and_stack_length * 8K) / 16K);
            ldf_stack_length = ldf_stack_end - ldf_stack_space;
            ldf_heap_space = ldf_stack_end;
            ldf_heap_end = ldf_heap_space + ((heaps_and_stack_length * 8K) / 16K);
            ldf_heap_length = ldf_heap_end - ldf_heap_space;
        } > seg_dmda

        seg_sram
        {
            INPUT_SECTIONS($OBJECTS(seg_sram) $LIBRARIES(seg_sram))
            PACKING(5   B0 B0 B0 B4 B0
                        B0 B0 B0 B3 B0
                        B0 B0 B0 B2 B0
                        B0 B0 B0 B1 B0)
        } > seg_sram
    }
}

